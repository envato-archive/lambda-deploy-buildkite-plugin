#!/bin/bash

set -euo pipefail

deploy_command=("aws" "lambda" "update-function-code" "--publish")
aws_s3_copy_command=("aws" "s3" "cp" "--acl" "private")

BUILDKITE_PLUGIN_LAMBDA_DEPLOY_FUNCTION_NAME=${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_FUNCTION_NAME:-''}
BUILDKITE_PLUGIN_LAMBDA_DEPLOY_ZIP_FILE=${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_ZIP_FILE:-''}
BUILDKITE_PLUGIN_LAMBDA_DEPLOY_PATH=${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_PATH:-''}
BUILDKITE_PLUGIN_LAMBDA_DEPLOY_REGION=${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_REGION:-us-east-1}
COPY_TO_S3=false

if [[ "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "--- :hammer: Enabling debug mode"
  set -x
fi

if [[ -n ${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_FUNCTION_NAME} ]] ; then
  deploy_command+=("--function-name" "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_FUNCTION_NAME}")
else
  echo "ðŸš¨: You must supply a function name" >&2
  exit 1
fi

if [[ -n "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_ZIP_FILE}" ]] ; then
  ZIP_FILE=${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_ZIP_FILE}
else
  echo "ðŸš¨: You must supply a zip file name" >&2
  exit 1
fi

if [[ -n "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_PATH}" ]] ; then
  ZIP_PATH="${PWD}/${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_PATH}/"
else
  ZIP_PATH="${PWD}/"
fi

DEPLOY_ZIP_FILE="${ZIP_PATH}${ZIP_FILE}"

if [[ -n "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_REGION:-us-east-1}" ]] ; then
  deploy_command+=("--region" "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_REGION}")
  aws_s3_copy_command+=("--region" "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_REGION}")
fi

if [[ -n "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_S3_BUCKET:-}" ]] && [[ -n "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_S3_KEY:-}" ]] ; then
  deploy_command+=("--s3-bucket" "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_S3_BUCKET}")
  deploy_command+=("--s3-key" "${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_S3_KEY}")
  aws_s3_copy_command+=("${DEPLOY_ZIP_FILE}" "s3://${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_S3_BUCKET}/${BUILDKITE_PLUGIN_LAMBDA_DEPLOY_S3_KEY}")
  COPY_TO_S3=true
else
  echo "S3 bucket or key not provided, copying up zip file direct to lambda"
  deploy_command+=("--zip-file" "fileb://${DEPLOY_ZIP_FILE}")
fi

aws_s3_copy() {
  "${aws_s3_copy_command[@]}"
}

aws_lambda_code_update() {
  "${deploy_command[@]}" | jq '.CodeSha256' | tr -d '"'
}

# zip up paths if provided
make_zip() {
  if [[ -e "$ZIP_PATH" ]] ; then
    pushd "$ZIP_PATH"
    zip -r "${DEPLOY_ZIP_FILE}" .
    popd
  else
    echo "ðŸš¨: Path for zip file not found" >&2
    exit 1
  fi
}

code_sha256() {
  openssl dgst -sha256 -binary "${DEPLOY_ZIP_FILE}" | base64 | tr -d '"'
}

# If deploy zip file exists, don't zip.
[[ -e ${DEPLOY_ZIP_FILE} ]] || make_zip

LOCAL_CHECKSUM=$(code_sha256)

[[ $COPY_TO_S3 == true ]] && aws_s3_copy

RETURNED_CHECKSUM=$(aws_lambda_code_update)

if [[ "$RETURNED_CHECKSUM" == "${LOCAL_CHECKSUM}" ]] ; then
  echo "Successfully uploaded new function code with SHA ${RETURNED_CHECKSUM}"
else
  echo "ðŸš¨:Checksum of local zip file ($LOCAL_CHECKSUM) does not match the returned checksum from AWS (${RETURNED_CHECKSUM})"
  exit 1
fi
